{
    "openapi": "3.0.0",
    "info": {
        "title": "JCreations API",
        "description": "API Documentation for JCreations Application",
        "contact": {
            "email": "support@jcreations.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "/",
            "description": "API Server"
        }
    ],
    "paths": {
        "/api/admin/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticates user credentials and returns a token",
                "operationId": "52072ab0ab3a6409abf44ae228659d79",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Admin User"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "admin@example.com"
                                                },
                                                "roles": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "admin"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "1|laravel_sanctum_token..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The provided credentials are incorrect."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The provided credentials are incorrect."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred during login"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/logout": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "description": "Invalidates the user's current access token",
                "operationId": "88b3d40bc97cfe058d67a9c1c9e541e2",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/admin/verify": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get authenticated user",
                "description": "Returns the currently authenticated user's information",
                "operationId": "236852103046fc75351cccbf39a6c4a2",
                "responses": {
                    "200": {
                        "description": "Authenticated user information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Admin User"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "admin@example.com"
                                        },
                                        "roles": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "admin"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/banner": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Get active banners",
                "description": "Returns the currently active mobile and desktop banners",
                "operationId": "getBanners",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "mobile": {
                                            "$ref": "#/components/schemas/Banner"
                                        },
                                        "desktop": {
                                            "$ref": "#/components/schemas/Banner"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No active banners found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No active banners found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/banner": {
            "post": {
                "tags": [
                    "Banners"
                ],
                "summary": "Upload a new banner",
                "description": "Uploads a new banner and replaces any existing one of the same type",
                "operationId": "storeBanner",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "image": {
                                        "description": "Banner image file (max 2MB)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "type": {
                                        "description": "Banner type",
                                        "type": "string",
                                        "enum": [
                                            "mobile",
                                            "desktop"
                                        ],
                                        "example": "desktop"
                                    },
                                    "title": {
                                        "description": "Banner title",
                                        "type": "string",
                                        "example": "Summer Sale"
                                    },
                                    "subtitle": {
                                        "description": "Banner subtitle",
                                        "type": "string",
                                        "example": "Up to 50% off"
                                    },
                                    "link": {
                                        "description": "Banner link URL",
                                        "type": "string",
                                        "example": "https://example.com/sale"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Banner created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Banner created successfully"
                                        },
                                        "banner": {
                                            "$ref": "#/components/schemas/Banner"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/admin/banner/{type}": {
            "delete": {
                "tags": [
                    "Banners"
                ],
                "summary": "Delete banner by type",
                "description": "Deletes the active banner of the specified type",
                "operationId": "deleteBanner",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Banner type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "mobile",
                                "desktop"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Banner deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Banner deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid banner type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid banner type"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No active banner found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No active banner found for this type"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cart": {
            "get": {
                "tags": [
                    "Cart"
                ],
                "summary": "Get cart contents",
                "description": "Returns the current cart with all items. Requires cart_id for guest users.",
                "operationId": "0652f94dde92e36bbb3c461356ce1d7b",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cart_id": {
                                        "description": "Required for guest users to identify their cart",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cart contents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "firebase_uid": {
                                            "type": "string",
                                            "example": "user123",
                                            "nullable": true
                                        },
                                        "total": {
                                            "type": "number",
                                            "example": 129.95
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CartItem"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cart"
                ],
                "summary": "Clear cart",
                "description": "Removes all items from the cart. Requires cart_id for guest users.",
                "operationId": "c11937b9c6a767730b1dc083d3d13e96",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cart_id": {
                                        "description": "Required for guest users to identify their cart",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cart cleared successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Cart cleared successfully"
                                        },
                                        "cart_id": {
                                            "description": "Store this ID for future cart operations",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cart/{id}": {
            "get": {
                "tags": [
                    "Cart"
                ],
                "summary": "Get cart by ID",
                "description": "Returns a specific cart by ID",
                "operationId": "557c72a5686912dee2512190ceb381c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cart ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart contents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cart"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart not found"
                    }
                }
            }
        },
        "/api/cart/items": {
            "post": {
                "tags": [
                    "Cart Items"
                ],
                "summary": "Add item to cart",
                "description": "Adds a product to the shopping cart. Requires cart_id for guest users.",
                "operationId": "584c30d7a890fd66597947dba9d9fbd1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "product_id",
                                    "quantity"
                                ],
                                "properties": {
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "wish": {
                                        "description": "Custom message for cake decoration",
                                        "type": "string",
                                        "example": "Happy Birthday Ashan",
                                        "nullable": true
                                    },
                                    "cart_id": {
                                        "description": "Required for guest users to identify their cart",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Item added to cart",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Item added to cart"
                                        },
                                        "item": {
                                            "$ref": "#/components/schemas/CartItemWithProduct"
                                        },
                                        "cart_id": {
                                            "description": "Store this ID for future cart operations",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/cart/items/{id}": {
            "put": {
                "tags": [
                    "Cart Items"
                ],
                "summary": "Update cart item",
                "description": "Updates the quantity and/or wish message of an item in the cart. Requires cart_id for guest users.",
                "operationId": "103627d0762186830290d892b3e990d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cart Item ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "quantity": {
                                        "description": "Item quantity. Optional - only needed if updating quantity",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "wish": {
                                        "description": "Custom message for cake decoration",
                                        "type": "string",
                                        "example": "Happy Birthday Ashan",
                                        "nullable": true
                                    },
                                    "cart_id": {
                                        "description": "Required for guest users to identify their cart",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Item updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Cart item updated"
                                        },
                                        "item": {
                                            "$ref": "#/components/schemas/CartItem"
                                        },
                                        "cart_id": {
                                            "description": "Store this ID for future cart operations",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart item not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cart Items"
                ],
                "summary": "Remove item from cart",
                "description": "Removes an item from the shopping cart. Requires cart_id for guest users.",
                "operationId": "3a2a1dade9e81ef8d4f58b6bc8384549",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cart Item ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cart_id": {
                                        "description": "Required for guest users to identify their cart",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Item removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Item removed from cart"
                                        },
                                        "cart_id": {
                                            "description": "Store this ID for future cart operations",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart item not found"
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Returns a list of all categories (public endpoint)",
                "operationId": "3f5817a34833d0a1f4af4548dd3aeaba",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Electronics"
                                            },
                                            "img": {
                                                "type": "string",
                                                "example": "categories/electronics.jpg"
                                            },
                                            "status": {
                                                "description": "Category status: true=active, false=inactive",
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/categories": {
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category with name, image and status",
                "operationId": "ac7cc88e7117004bc914f1d2169c5444",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "img"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Electronics"
                                    },
                                    "img": {
                                        "description": "Category image",
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "status": {
                                        "description": "Category status: true=active, false=inactive",
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        },
                                        "img": {
                                            "type": "string",
                                            "example": "categories/electronics.jpg"
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/categories/{category}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get category details",
                "description": "Returns the details of a specific category (public endpoint)",
                "operationId": "e92579e78391b6199e78c2a091dbea0a",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        },
                                        "img": {
                                            "type": "string",
                                            "example": "categories/electronics.jpg"
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/admin/categories/{category}": {
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update category",
                "description": "Updates an existing category",
                "operationId": "e79fd90b1a978c99a6faae0e32823ee1",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Electronics"
                                    },
                                    "img": {
                                        "description": "Category image",
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "status": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "_method": {
                                        "type": "string",
                                        "default": "PUT",
                                        "example": "PUT"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Updated Electronics"
                                        },
                                        "img": {
                                            "type": "string",
                                            "example": "categories/updated-electronics.jpg"
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete category",
                "description": "Deletes a category",
                "operationId": "cf8a40aa1eedd264f221ce73614da9c3",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/admin/categories/{category}/toggle-status": {
            "patch": {
                "tags": [
                    "Categories"
                ],
                "summary": "Toggle category status",
                "description": "Activates or deactivates a category",
                "operationId": "d7e33eaaa16543c998483ba30160a9f3",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category status toggled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        },
                                        "img": {
                                            "type": "string",
                                            "example": "categories/electronics.jpg"
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/cod-limit": {
            "get": {
                "tags": [
                    "COD Limit"
                ],
                "summary": "Get current COD limit",
                "description": "Returns the current cash on delivery limit settings (public endpoint)",
                "operationId": "5e6d09bf4e4ab706cde9fbe27ace96f3",
                "responses": {
                    "200": {
                        "description": "COD limit retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "limit_amount": {
                                                    "type": "string",
                                                    "example": "5000.00"
                                                },
                                                "is_active": {
                                                    "description": "COD limit status: true=active, false=inactive",
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "COD limit not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "COD limit not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/cod-limit": {
            "put": {
                "tags": [
                    "COD Limit"
                ],
                "summary": "Update COD limit",
                "description": "Updates the cash on delivery limit amount and status",
                "operationId": "59c298ff1ad9057646fa133deeb48fe1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "limit_amount"
                                ],
                                "properties": {
                                    "limit_amount": {
                                        "description": "The COD limit amount",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 7500
                                    },
                                    "is_active": {
                                        "description": "COD limit status: true=active, false=inactive",
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "COD limit updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "COD limit updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "limit_amount": {
                                                    "type": "string",
                                                    "example": "7500.00"
                                                },
                                                "is_active": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "limit_amount": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The limit amount field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/admin/cod-limit/toggle-status": {
            "patch": {
                "tags": [
                    "COD Limit"
                ],
                "summary": "Toggle COD limit status",
                "description": "Activates or deactivates the COD limit",
                "operationId": "1c4a78b698a40a1355def3fdf3d1e50c",
                "responses": {
                    "200": {
                        "description": "COD limit status toggled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "COD limit status toggled successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "limit_amount": {
                                                    "type": "string",
                                                    "example": "5000.00"
                                                },
                                                "is_active": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "COD limit not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "COD limit not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/locations": {
            "get": {
                "tags": [
                    "Delivery Locations"
                ],
                "summary": "Get list of all delivery locations",
                "description": "Display a listing of the locations.",
                "operationId": "3636cdc822eb207da4b9f5750800e22c",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "locations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DeliveryLocation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/locations": {
            "post": {
                "tags": [
                    "Delivery Locations"
                ],
                "summary": "Create a new delivery location",
                "description": "Store a newly created location in storage.",
                "operationId": "99c0ab7cd998762289e95964daa67199",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "city",
                                    "shipping_charge"
                                ],
                                "properties": {
                                    "city": {
                                        "type": "string",
                                        "example": "New York"
                                    },
                                    "shipping_charge": {
                                        "type": "number",
                                        "example": 10.5
                                    },
                                    "is_active": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Location created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Location created successfully"
                                        },
                                        "location": {
                                            "$ref": "#/components/schemas/DeliveryLocation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/locations/{location}": {
            "get": {
                "tags": [
                    "Delivery Locations"
                ],
                "summary": "Get a specific delivery location",
                "description": "Display the specified location.",
                "operationId": "4f87ecd7a203a553472bc2ef329d9ce3",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "Delivery location ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "location": {
                                            "$ref": "#/components/schemas/DeliveryLocation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Delivery Locations"
                ],
                "summary": "Update a delivery location",
                "description": "Update the specified location in storage.",
                "operationId": "1692c9e838945c571eedb1162177c17c",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "Delivery location ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "city",
                                    "shipping_charge"
                                ],
                                "properties": {
                                    "city": {
                                        "type": "string",
                                        "example": "Chicago"
                                    },
                                    "shipping_charge": {
                                        "type": "number",
                                        "example": 15.75
                                    },
                                    "is_active": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Location updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Location updated successfully"
                                        },
                                        "location": {
                                            "$ref": "#/components/schemas/DeliveryLocation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed"
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Delivery Locations"
                ],
                "summary": "Delete a delivery location",
                "description": "Remove the specified location from storage.",
                "operationId": "0ef5926d57961de4f27ded8ab65037f1",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "Delivery location ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Location deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            }
        },
        "/api/send-verification-code": {
            "post": {
                "tags": [
                    "Email Verification"
                ],
                "summary": "Send verification code to email",
                "description": "Sends a verification code to the provided email address",
                "operationId": "sendVerificationCode",
                "requestBody": {
                    "description": "Email and verification code",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "code"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification code sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification code sent successfully"
                                        },
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid"
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required"
                                                    }
                                                },
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The code must be 6 characters"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Please wait before requesting another code"
                                        },
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/mobile-numbers": {
            "get": {
                "tags": [
                    "Mobile Numbers"
                ],
                "summary": "Get list of mobile numbers",
                "description": "Display a listing of mobile numbers.",
                "operationId": "7b390686ba0cd0d3bbca7394ebc1d2d8",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "number": {
                                                "type": "string"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/mobile-numbers": {
            "post": {
                "tags": [
                    "Mobile Numbers"
                ],
                "summary": "Store a new mobile number",
                "description": "Store a newly created mobile number.",
                "operationId": "8da23d6f1c4232510dc93ecd3249f918",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "number"
                                ],
                                "properties": {
                                    "number": {
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Mobile number created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Mobile number created successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/mobile-numbers/{mobileNumber}": {
            "get": {
                "tags": [
                    "Mobile Numbers"
                ],
                "summary": "Get a specific mobile number",
                "description": "Display the specified mobile number.",
                "operationId": "58d69387bf2363110f269b087a7db72c",
                "parameters": [
                    {
                        "name": "mobileNumber",
                        "in": "path",
                        "description": "ID of mobile number to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mobile number retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "number": {
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Mobile number not found"
                    }
                }
            }
        },
        "/api/admin/mobile-numbers/{mobileNumber}": {
            "put": {
                "tags": [
                    "Mobile Numbers"
                ],
                "summary": "Update an existing mobile number",
                "description": "Update the specified mobile number.",
                "operationId": "367a5699e22d2541063c955517f7262e",
                "parameters": [
                    {
                        "name": "mobileNumber",
                        "in": "path",
                        "description": "ID of mobile number to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "number"
                                ],
                                "properties": {
                                    "number": {
                                        "type": "string",
                                        "maxLength": 20,
                                        "example": "9876543210"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Mobile number updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Mobile number updated successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Mobile number not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Mobile Numbers"
                ],
                "summary": "Delete a mobile number",
                "description": "Remove the specified mobile number.",
                "operationId": "4d0befd5f527e30e3762208f746ad9f0",
                "parameters": [
                    {
                        "name": "mobileNumber",
                        "in": "path",
                        "description": "ID of mobile number to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mobile number deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Mobile number deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Mobile number not found"
                    }
                }
            }
        },
        "/api/orders/cod": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new cash on delivery order",
                "description": "Creates a new order with payment type set to cash on delivery",
                "operationId": "createCodOrder",
                "requestBody": {
                    "description": "Order creation details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "cart_id",
                                    "customer_name",
                                    "contact_number",
                                    "city",
                                    "address"
                                ],
                                "properties": {
                                    "cart_id": {
                                        "description": "ID of the cart containing items to order",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "customer_name": {
                                        "description": "Full name of the customer",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "contact_number": {
                                        "description": "Contact phone number for delivery",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "city": {
                                        "description": "City for delivery (must exist in delivery_locations table)",
                                        "type": "string",
                                        "example": "New York"
                                    },
                                    "address": {
                                        "description": "Detailed delivery address",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "firebase_uid": {
                                        "description": "Firebase user ID for authenticated users",
                                        "type": "string",
                                        "example": "abc123xyz",
                                        "nullable": true
                                    },
                                    "req_datetime": {
                                        "description": "Requested delivery date and time",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-04-30T14:00:00Z",
                                        "nullable": true
                                    },
                                    "shipping_charge": {
                                        "description": "Custom shipping charge (if not using location-based charge)",
                                        "type": "number",
                                        "format": "float",
                                        "example": 10,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Cash on delivery order created successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "total_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 150.75
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "cart_id": [
                                                    "The cart id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart not found or empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cart not found or empty"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/orders/online": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new online order with card payment",
                "description": "Creates a new order with payment type set to card payment and returns payment gateway information",
                "operationId": "createOnlineOrder",
                "requestBody": {
                    "description": "Order creation details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "cart_id",
                                    "customer_name",
                                    "contact_number",
                                    "city",
                                    "address"
                                ],
                                "properties": {
                                    "cart_id": {
                                        "description": "ID of the cart containing items to order",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "customer_name": {
                                        "description": "Full name of the customer",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "contact_number": {
                                        "description": "Contact phone number for delivery",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "city": {
                                        "description": "City for delivery (must exist in delivery_locations table)",
                                        "type": "string",
                                        "example": "New York"
                                    },
                                    "address": {
                                        "description": "Detailed delivery address",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "firebase_uid": {
                                        "description": "Firebase user ID for authenticated users",
                                        "type": "string",
                                        "example": "abc123xyz",
                                        "nullable": true
                                    },
                                    "req_datetime": {
                                        "description": "Requested delivery date and time",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-04-30T14:00:00Z",
                                        "nullable": true
                                    },
                                    "shipping_charge": {
                                        "description": "Custom shipping charge (if not using location-based charge)",
                                        "type": "number",
                                        "format": "float",
                                        "example": 10,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Online order created successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "payment_status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "total_amount": {
                                            "type": "string",
                                            "example": "150.75"
                                        },
                                        "shipping_charge": {
                                            "type": "string",
                                            "example": "10.00"
                                        },
                                        "total_with_shipping": {
                                            "type": "string",
                                            "example": "160.75"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "product_name": {
                                                        "type": "string",
                                                        "example": "Product Name"
                                                    },
                                                    "quantity": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "unit_price": {
                                                        "type": "string",
                                                        "example": "75.38"
                                                    },
                                                    "subtotal": {
                                                        "type": "string",
                                                        "example": "150.75"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "payment_data": {
                                            "properties": {
                                                "merchant_id": {
                                                    "type": "string",
                                                    "example": "1221046"
                                                },
                                                "order_id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "amount": {
                                                    "type": "string",
                                                    "example": "160.75"
                                                },
                                                "currency": {
                                                    "type": "string",
                                                    "example": "LKR"
                                                },
                                                "hash": {
                                                    "type": "string",
                                                    "example": "A1B2C3D4E5F6..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "cart_id": [
                                                    "The cart id field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart not found or empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cart not found or empty"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get order details",
                "description": "Retrieves detailed information about a specific order including all order items",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "customer_name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "contact_number": {
                                            "type": "string",
                                            "example": "1234567890"
                                        },
                                        "delivery_location_id": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "address": {
                                            "type": "string",
                                            "example": "123 Main St"
                                        },
                                        "firebase_uid": {
                                            "type": "string",
                                            "example": "abc123xyz",
                                            "nullable": true
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "payment_type": {
                                            "type": "string",
                                            "example": "cash_on_delivery"
                                        },
                                        "payment_status": {
                                            "type": "string",
                                            "example": "pending",
                                            "nullable": true
                                        },
                                        "total_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 150.75
                                        },
                                        "shipping_charge": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 10
                                        },
                                        "order_datetime": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2025-04-27T10:30:00Z"
                                        },
                                        "req_datetime": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2025-04-30T14:00:00Z",
                                            "nullable": true
                                        },
                                        "orderItems": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 456
                                                    },
                                                    "order_id": {
                                                        "type": "integer",
                                                        "example": 123
                                                    },
                                                    "product_name": {
                                                        "type": "string",
                                                        "example": "Product Name"
                                                    },
                                                    "quantity": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "unit_price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 75.38
                                                    },
                                                    "total_price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 150.75
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Order not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/orders/{id}/status": {
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "description": "Updates the processing status of an existing order",
                "operationId": "updateOrderStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "requestBody": {
                    "description": "New order status",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "The new status for the order",
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "processing",
                                            "shipped",
                                            "delivered",
                                            "cancelled"
                                        ],
                                        "example": "processing"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order status updated successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "processing"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "status": [
                                                    "The status field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Order not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/orders/{id}/payment-status": {
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order payment status",
                "description": "Updates the payment status of an existing order",
                "operationId": "updatePaymentStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "requestBody": {
                    "description": "New payment status",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "payment_status"
                                ],
                                "properties": {
                                    "payment_status": {
                                        "description": "The new payment status for the order",
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "success",
                                            "failed"
                                        ],
                                        "example": "success"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order payment status updated successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "payment_status": {
                                            "type": "string",
                                            "example": "success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "payment_status": [
                                                    "The payment status field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Order not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/{firebase_uid}/orders/{limit}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders for a specific user with limit",
                "description": "Retrieves a limited list of orders associated with a specific Firebase user ID",
                "operationId": "getUserOrders",
                "parameters": [
                    {
                        "name": "firebase_uid",
                        "in": "path",
                        "description": "Firebase user ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "abc123xyz"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "Maximum number of orders to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter orders by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "processing",
                                "shipped",
                                "delivered",
                                "cancelled"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "customer_name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "contact_number": {
                                                "type": "string",
                                                "example": "1234567890"
                                            },
                                            "delivery_location_id": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "address": {
                                                "type": "string",
                                                "example": "123 Main St"
                                            },
                                            "firebase_uid": {
                                                "type": "string",
                                                "example": "abc123xyz",
                                                "nullable": true
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "processing",
                                                    "shipped",
                                                    "delivered",
                                                    "cancelled"
                                                ],
                                                "example": "pending"
                                            },
                                            "payment_type": {
                                                "type": "string",
                                                "enum": [
                                                    "cash_on_delivery",
                                                    "card_payment"
                                                ],
                                                "example": "cash_on_delivery"
                                            },
                                            "payment_status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "success",
                                                    "failed"
                                                ],
                                                "example": "pending",
                                                "nullable": true
                                            },
                                            "total_amount": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 150.75
                                            },
                                            "shipping_charge": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 10
                                            },
                                            "order_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-27T10:30:00Z"
                                            },
                                            "req_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-30T14:00:00Z",
                                                "nullable": true
                                            },
                                            "orderItems": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 456
                                                        },
                                                        "order_id": {
                                                            "type": "integer",
                                                            "example": 123
                                                        },
                                                        "product_name": {
                                                            "type": "string",
                                                            "example": "Product Name"
                                                        },
                                                        "quantity": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "unit_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 75.38
                                                        },
                                                        "total_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 150.75
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get all orders with optional filtering",
                "description": "Retrieves a list of all orders with optional filters for status, payment type, and user",
                "operationId": "getAllOrders",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter orders by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "processing",
                                "shipped",
                                "delivered",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "payment_type",
                        "in": "query",
                        "description": "Filter orders by payment type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "cash_on_delivery",
                                "card_payment"
                            ]
                        }
                    },
                    {
                        "name": "firebase_uid",
                        "in": "query",
                        "description": "Filter orders by user's Firebase ID",
                        "schema": {
                            "type": "string",
                            "example": "abc123xyz"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return (default: all records)",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "customer_name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "contact_number": {
                                                "type": "string",
                                                "example": "1234567890"
                                            },
                                            "delivery_location_id": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "address": {
                                                "type": "string",
                                                "example": "123 Main St"
                                            },
                                            "firebase_uid": {
                                                "type": "string",
                                                "example": "abc123xyz",
                                                "nullable": true
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "processing",
                                                    "shipped",
                                                    "delivered",
                                                    "cancelled"
                                                ],
                                                "example": "pending"
                                            },
                                            "payment_type": {
                                                "type": "string",
                                                "enum": [
                                                    "cash_on_delivery",
                                                    "card_payment"
                                                ],
                                                "example": "cash_on_delivery"
                                            },
                                            "payment_status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "success",
                                                    "failed"
                                                ],
                                                "example": "pending",
                                                "nullable": true
                                            },
                                            "total_amount": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 150.75
                                            },
                                            "shipping_charge": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 10
                                            },
                                            "order_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-27T10:30:00Z"
                                            },
                                            "req_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-30T14:00:00Z",
                                                "nullable": true
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-27T10:30:00Z"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-27T10:30:00Z"
                                            },
                                            "orderItems": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 456
                                                        },
                                                        "order_id": {
                                                            "type": "integer",
                                                            "example": 123
                                                        },
                                                        "product_name": {
                                                            "type": "string",
                                                            "example": "Product Name"
                                                        },
                                                        "quantity": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "unit_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 75.38
                                                        },
                                                        "total_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 150.75
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/orders/search": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Search orders by various criteria",
                "description": "Performs a search across orders with filtering options for text search, status, payment type, and date range",
                "operationId": "searchOrders",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query (searches in customer name, order ID, contact number, and address)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 2,
                            "example": "john"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter orders by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "processing",
                                "shipped",
                                "delivered",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "payment_type",
                        "in": "query",
                        "description": "Filter orders by payment type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "cash_on_delivery",
                                "card_payment"
                            ]
                        }
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "Filter orders from this date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2025-04-01"
                        }
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "Filter orders until this date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2025-04-27"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records per page (default 20)",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "customer_name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "contact_number": {
                                                "type": "string",
                                                "example": "1234567890"
                                            },
                                            "delivery_location_id": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "address": {
                                                "type": "string",
                                                "example": "123 Main St"
                                            },
                                            "firebase_uid": {
                                                "type": "string",
                                                "example": "abc123xyz",
                                                "nullable": true
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "processing",
                                                    "shipped",
                                                    "delivered",
                                                    "cancelled"
                                                ],
                                                "example": "pending"
                                            },
                                            "payment_type": {
                                                "type": "string",
                                                "enum": [
                                                    "cash_on_delivery",
                                                    "card_payment"
                                                ],
                                                "example": "cash_on_delivery"
                                            },
                                            "payment_status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "success",
                                                    "failed"
                                                ],
                                                "example": "pending",
                                                "nullable": true
                                            },
                                            "total_amount": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 150.75
                                            },
                                            "shipping_charge": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 10
                                            },
                                            "order_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-27T10:30:00Z"
                                            },
                                            "req_datetime": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2025-04-30T14:00:00Z",
                                                "nullable": true
                                            },
                                            "orderItems": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 456
                                                        },
                                                        "order_id": {
                                                            "type": "integer",
                                                            "example": 123
                                                        },
                                                        "product_name": {
                                                            "type": "string",
                                                            "example": "Product Name"
                                                        },
                                                        "quantity": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "unit_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 75.38
                                                        },
                                                        "total_price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 150.75
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "query": [
                                                    "The query field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/orders/{id}/cancel": {
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel an order",
                "description": "Cancels an existing order if it's in a cancellable state (not delivered or shipped)",
                "operationId": "cancelOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order cancelled successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Cannot cancel order in current status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cannot cancel order in shipped status"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Order not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{limit?}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products with optional limit",
                "description": "Returns a list of all active products (public endpoint, default limit is 20)",
                "operationId": "545b9fef878b062079f4d52389aef2e2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "Maximum number of products to return (default: 20, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/products/limit/{limit}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products (including deactivated ones)",
                "description": "Returns a list of all products including deactivated ones (admin only)",
                "operationId": "947b95d08da896fa7691a5368b531d7b",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "Maximum number of products to return (no maximum for admin)",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/admin/products": {
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product with details and images",
                "operationId": "a19f84741edc4e6e9599d1d0ed8b3360",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "category_id",
                                    "price",
                                    "status",
                                    "image1"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Smartphone XYZ"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Latest smartphone with advanced features"
                                    },
                                    "character_count": {
                                        "description": "Character count of description (auto-calculated if not provided)",
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 50
                                    },
                                    "image1": {
                                        "description": "First product image (required)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "image2": {
                                        "description": "Second product image (optional)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "image3": {
                                        "description": "Third product image (optional)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 999.99
                                    },
                                    "discount_percentage": {
                                        "type": "number",
                                        "format": "float",
                                        "maximum": 100,
                                        "minimum": 0,
                                        "example": 10.5
                                    },
                                    "discounted_price": {
                                        "description": "Direct discounted price (alternative to discount_percentage)",
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 899.99
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "deactive",
                                            "in_stock",
                                            "out_of_stock"
                                        ],
                                        "example": "in_stock"
                                    },
                                    "daily_deals": {
                                        "description": "Daily deals status",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "deactive"
                                        ],
                                        "example": "deactive"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Error creating product"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/product/single/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product details by ID",
                "description": "Returns the details of a specific product by ID (public endpoint)",
                "operationId": "50e72ab061ef1d46df684d2b947ca1b9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/products/{product}": {
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "description": "Updates an existing product with new details and optionally new images",
                "operationId": "4c34bb1137dacdbc234e97d171ec0111",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Updated Smartphone XYZ"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated smartphone with advanced features"
                                    },
                                    "character_count": {
                                        "description": "Character count of description (auto-calculated if not provided)",
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 50
                                    },
                                    "image1": {
                                        "description": "First product image",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "image2": {
                                        "description": "Second product image",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "image3": {
                                        "description": "Third product image",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 999.99
                                    },
                                    "discount_percentage": {
                                        "type": "number",
                                        "format": "float",
                                        "maximum": 100,
                                        "minimum": 0,
                                        "example": 10.5
                                    },
                                    "discounted_price": {
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 899.99
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "deactive",
                                            "in_stock",
                                            "out_of_stock"
                                        ],
                                        "example": "in_stock"
                                    },
                                    "daily_deals": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "deactive"
                                        ],
                                        "example": "deactive"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Deletes a product and its associated images",
                "operationId": "2ed7f4be9e6e2b3aba212b27b3aed2b9",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/search/{limit?}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Search products",
                "description": "Search products by name, description, category, price range, and status with optional limit.",
                "operationId": "4047ea21e6364b9d18344b855d27bb50",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "Maximum number of products to return (default: 20, max: 100000)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search query string (matches name or description)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "smartphone"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by category ID",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 100
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 1000
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Product status (in_stock, out_of_stock, etc.)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "in_stock"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/deals/{limit?}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get daily deals products",
                "description": "Returns a list of products with active daily deals (public endpoint, default limit is 20)",
                "operationId": "5b9159910c0993f94a2ac62301de3dfa",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "path",
                        "description": "Maximum number of products to return (default: 20, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of daily deals products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Banner": {
                "title": "Banner",
                "description": "Banner model",
                "properties": {
                    "id": {
                        "description": "Banner ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "image_path": {
                        "description": "Path to the banner image",
                        "type": "string"
                    },
                    "title": {
                        "description": "Banner title",
                        "type": "string",
                        "nullable": true
                    },
                    "subtitle": {
                        "description": "Banner subtitle",
                        "type": "string",
                        "nullable": true
                    },
                    "link": {
                        "description": "Banner link URL",
                        "type": "string",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Whether the banner is active",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Cart": {
                "title": "Cart",
                "description": "Shopping cart model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "firebase_uid": {
                        "type": "string",
                        "example": "user123",
                        "nullable": true
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "example": 129.95
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItem"
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CartItem": {
                "title": "Cart Item",
                "description": "Shopping cart item",
                "properties": {
                    "id": {
                        "description": "Class CartItem",
                        "type": "integer",
                        "example": 1
                    },
                    "cart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 101
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 2
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CartItemWithProduct": {
                "title": "Cart Item With Product",
                "description": "Cart item with embedded product data",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CartItem"
                    },
                    {
                        "properties": {
                            "product": {
                                "$ref": "#/components/schemas/Product"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "DeliveryLocation": {
                "title": "Delivery Location",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "city": {
                        "type": "string"
                    },
                    "shipping_charge": {
                        "type": "number",
                        "format": "float"
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Product": {
                "required": [
                    "name",
                    "description",
                    "category_id",
                    "price",
                    "status"
                ],
                "properties": {
                    "id": {
                        "description": "Product ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Product name",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Smartphone XYZ"
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string",
                        "example": "Latest smartphone with advanced features"
                    },
                    "character_count": {
                        "description": "Character count of description",
                        "type": "integer",
                        "minimum": 0,
                        "example": 50
                    },
                    "images": {
                        "description": "Array of product image paths",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "products/image1.jpg",
                            "products/image2.jpg"
                        ]
                    },
                    "category_id": {
                        "description": "Category ID",
                        "type": "integer",
                        "example": 1
                    },
                    "category": {
                        "description": "Product category (included when relationship is loaded)",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Electronics"
                            },
                            "description": {
                                "type": "string",
                                "example": "Electronic devices and accessories"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    },
                    "price": {
                        "description": "Original price",
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "example": 999.99
                    },
                    "discount_percentage": {
                        "description": "Discount percentage",
                        "type": "number",
                        "format": "float",
                        "maximum": 100,
                        "minimum": 0,
                        "example": 10.5
                    },
                    "status": {
                        "description": "Product status",
                        "type": "string",
                        "enum": [
                            "deactive",
                            "in_stock",
                            "out_of_stock"
                        ],
                        "example": "in_stock"
                    },
                    "daily_deals": {
                        "description": "Daily deals status",
                        "type": "string",
                        "enum": [
                            "active",
                            "deactive"
                        ],
                        "example": "deactive"
                    },
                    "discounted_price": {
                        "description": "Calculated price after applying discount (computed attribute)",
                        "type": "number",
                        "format": "float",
                        "example": 899.99
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-06-14T10:30:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-06-14T10:30:00Z"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "API endpoints for user authentication"
        },
        {
            "name": "Banners",
            "description": "API endpoints for managing banners"
        },
        {
            "name": "Cart",
            "description": "API endpoints for shopping cart management"
        },
        {
            "name": "Cart Items",
            "description": "API endpoints for managing items in the shopping cart"
        },
        {
            "name": "Categories",
            "description": "API endpoints for category management"
        },
        {
            "name": "COD Limit",
            "description": "API endpoints for Cash on Delivery limit management"
        },
        {
            "name": "Delivery Locations",
            "description": "API Endpoints for managing delivery locations"
        },
        {
            "name": "Orders",
            "description": "API endpoints for order management including cash on delivery and online payments"
        },
        {
            "name": "Products",
            "description": "API endpoints for product management"
        },
        {
            "name": "Email Verification",
            "description": "Email Verification"
        },
        {
            "name": "Mobile Numbers",
            "description": "Mobile Numbers"
        }
    ]
}